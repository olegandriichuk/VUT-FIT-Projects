DROP TABLE Ucastnik CASCADE CONSTRAINTS PURGE;
DROP TABLE Alkoholik CASCADE CONSTRAINTS;
DROP TABLE Patron;
DROP TABLE Odbornik CASCADE CONSTRAINTS;
DROP TABLE Sezeni CASCADE CONSTRAINTS;
DROP TABLE UcastNaSezeni;
DROP TABLE MistoKonani;
DROP TABLE Upominka;
DROP TABLE Kontrola CASCADE CONSTRAINTS;
DROP TABLE Evidence_Alkoholu;
DROP MATERIALIZED VIEW  pritomnostalkoholiku_pohled;

/*
 VZTAH GENERALIZACE / SPECIALIZACE
 V ER diagrame je vidno, ze z entitnej mnoziny Ucastnik dedi Alkoholik, Odbornik a Patron.
 Tabulky pro tyhle 3 entitni mnoziny obsahuji cizi klic, ktery ich odkazuje na prislusneho
 Ucastnika (ich rodice). Tento cizi klic je zaroven primarnym klicem.

 (zo slajdu prednasky: "tabulka pro nadtyp + pro podtypy s primarnim klicem nadtypu")
 */
CREATE TABLE Ucastnik
(
    id_ucastnika INT
        GENERATED BY DEFAULT AS IDENTITY
        PRIMARY KEY           NOT NULL,
    jmeno        VARCHAR(255) NOT NULL
);

CREATE TABLE Alkoholik
(
    id_alkoholika INT     NOT NULL PRIMARY KEY REFERENCES Ucastnik (id_ucastnika),
    vek           INT     NOT NULL,
    pohlavi       CHAR(1) NOT NULL,
    -- (FK) id patrona ktery alkoholika podporuje, constraint je zaveden pozdeji
    id_patrona    INT     NOT NULL,
    -- (FK) id odbornika ktery na alkoholika dohlizi, constraint je zaveden pozdeji
    id_odbornika  INT     NOT NULL,
    datum_pridani TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Patron
(
    id_patrona INT NOT NULL PRIMARY KEY REFERENCES Ucastnik (id_ucastnika)
);

CREATE TABLE Odbornik
(
    id_odbornika  INT          NOT NULL PRIMARY KEY REFERENCES Ucastnik (id_ucastnika),
    expertiza     VARCHAR(255) NOT NULL,
    lekarska_prax INT          NOT NULL CHECK (lekarska_prax >= 1)
);



CREATE TABLE MistoKonani
(
    id_mistoKonani INT NOT NULL PRIMARY KEY,
    lokace         VARCHAR(255)
);

CREATE TABLE Sezeni
(
    id_mistoKonani INT          NOT NULL REFERENCES MistoKonani (id_mistoKonani),
    id_sezeni      INT          NOT NULL,
    datum_cas      TIMESTAMP(0) NOT NULL,
    id_vedouciho   INT          NOT NULL REFERENCES UCASTNIK (id_ucastnika),
    CONSTRAINT sezeni_mistoKonani_id_pk
        PRIMARY KEY (id_mistoKonani, id_sezeni)
);

CREATE TABLE UcastNaSezeni
(
    id_ucastnika    INT NOT NULL,
    id_misto_konani INT NOT NULL,
    id_sezeni       INT NOT NULL,
    CONSTRAINT FK_ucastnika
        FOREIGN KEY (id_ucastnika) REFERENCES Ucastnik (id_ucastnika),
    CONSTRAINT FK_sezeni_misto_konani FOREIGN KEY (id_misto_konani, id_sezeni)
        REFERENCES Sezeni (id_mistoKonani, id_sezeni), -- Adjust this
    CONSTRAINT PK_ucast_na_sezeni
        PRIMARY KEY (id_ucastnika, id_misto_konani, id_sezeni)
);

CREATE TABLE Upominka
(
    id_alkoholika INT NOT NULL REFERENCES Alkoholik (id_alkoholika),
    id_upominky   INT NOT NULL,
    text_upominky VARCHAR(255),

    CONSTRAINT PK_upominka
        PRIMARY KEY (id_alkoholika, id_upominky)
);

CREATE TABLE Kontrola
(
    id_alkoholika INT          NOT NULL REFERENCES Alkoholik (id_alkoholika),
    id_kontrola   INT          NOT NULL,
    datum_cas     TIMESTAMP(0) NOT NULL,
    id_odbornika  INT          NOT NULL REFERENCES Odbornik (id_odbornika),
    CONSTRAINT PK_Kontrola_Alkoholika_id
        PRIMARY KEY (id_alkoholika, id_kontrola)
);

CREATE TABLE Evidence_Alkoholu
(
    id_alkoholika INT NOT NULL,
    id_kontrola   INT NOT NULL,
    promile       NUMERIC(4, 1),
    typAlkoholu   VARCHAR(30),
    CONSTRAINT FK_kontrola_alkoholika
        FOREIGN KEY (id_alkoholika, id_kontrola) REFERENCES Kontrola (id_alkoholika, id_kontrola),
    CONSTRAINT PK_kontrola
        PRIMARY KEY (id_alkoholika, id_kontrola)
);


-- pozdni constraints na alkoholika - foreign keys pro patrona a odbornika
ALTER TABLE Alkoholik
    MODIFY id_patrona REFERENCES Patron (id_patrona);
ALTER TABLE Alkoholik
    MODIFY id_odbornika REFERENCES Odbornik (id_odbornika);

--TRIGGERS
-- pokud alkoholik ma upominku tak nemuze jit na kontrolu
CREATE OR REPLACE TRIGGER znemozneni_kontroly_jestli_upominka
BEFORE INSERT ON Kontrola
FOR EACH ROW
DECLARE
    pocet_upominek INT;
BEGIN
 -- pociteni upominek pro alkoholika
    SELECT COUNT(*)
    INTO pocet_upominek
    FROM Upominka
    WHERE id_alkoholika = :NEW.id_alkoholika AND text_upominky LIKE '%nebyli aa jste na schůzce%';

    IF pocet_upominek > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Cannot add control, unresolved remarks exist.');
END IF;
END;

-- pred vytvorenim noveho sezeni skontroluj, jesli je tvoren pro budoucnost
CREATE OR REPLACE TRIGGER "zakazani_tvorby_sezeni_v_minulosti"
    BEFORE INSERT ON Sezeni
    FOR EACH ROW
    DECLARE
        povolit_vklad_do_minulosti INT := 1; -- 0 znaci false
    BEGIN
        IF povolit_vklad_do_minulosti = 0 AND EXTRACT(SECOND FROM (CURRENT_TIMESTAMP - :NEW.datum_cas)) > 0 THEN
            RAISE_APPLICATION_ERROR(-20500, 'Vklad sezeni do minulosti zakazan. Pro ucely ladeni se tohle da vypnout v prislusnem triggery');
        end if;
    end;




---------------- vlozeni ukazkovych dat ---------------------------

-- ucastnik (postfixy -alkoholik/-patron/-odbornik su jenom na ukazku)
INSERT INTO Ucastnik
VALUES (1, 'patrik-alkoholik');
INSERT INTO Ucastnik
VALUES (2, 'jana-alkoholik');
INSERT INTO Ucastnik
VALUES (3, 'olga-alkoholik');
INSERT INTO Ucastnik
VALUES (4, 'richard-alkoholik');
INSERT INTO Ucastnik
VALUES (50, 'debug-alkoholik');

INSERT INTO Ucastnik
VALUES (5, 'ivan-patron');
INSERT INTO Ucastnik
VALUES (6, 'simon-patron');

INSERT INTO Ucastnik
VALUES (7, 'alex-odbornik');
INSERT INTO Ucastnik
VALUES (8, 'maria-odbornik');
INSERT INTO Ucastnik
VALUES (9, 'jakub-odbornik');
INSERT INTO Ucastnik
VALUES (10, 'honza-odbornik');

-- vytvoreni patronu z ucastniku
INSERT INTO Patron
VALUES (5);
INSERT INTO Patron
VALUES (6);

-- vytvoreni odborniku z ucastniku
INSERT INTO Odbornik
VALUES (7, 'muni-med', 12);
INSERT INTO Odbornik
VALUES (8, 'psycholog v alfonozovi', 5);
INSERT INTO Odbornik
VALUES (9, 'nemocnice bohunice', 5);
INSERT INTO Odbornik
VALUES (10, 'muni-med', 2);

-- vytvoreni alkoholiku z ucastniku a prideleni patrona a odbornika
INSERT INTO Alkoholik (id_alkoholika, vek, pohlavi, id_patrona, id_odbornika)
VALUES (1, 23, 'm', 5, 7);
INSERT INTO Alkoholik (id_alkoholika, vek, pohlavi, id_patrona, id_odbornika)
VALUES (2, 50, 'f', 5, 8);
INSERT INTO Alkoholik (id_alkoholika, vek, pohlavi, id_patrona, id_odbornika)
VALUES (3, 30, 'f', 6, 7);
INSERT INTO Alkoholik (id_alkoholika, vek, pohlavi, id_patrona, id_odbornika)
VALUES (4, 63, 'm', 6, 8);
INSERT INTO Alkoholik (id_alkoholika, vek, pohlavi, id_patrona, id_odbornika)
VALUES (50, 100, 'f', 6, 10);

-- misto konani
INSERT INTO MistoKonani
VALUES (1, 'bozetechova 20');
INSERT INTO MistoKonani
VALUES (2, 'zahrebska 158');
INSERT INTO MistoKonani
VALUES (3, 'svoralova 72');

-- sezeni
INSERT INTO Sezeni
VALUES (2, 1, '13-11-2022 14:00:00', 4); -- sezeni cislo 1 v lokalite 2, kde vedouci je ucastnik 4
INSERT INTO Sezeni
VALUES (2, 2, '19-02-2024 18:30:00', 6);
INSERT INTO Sezeni
VALUES (1, 1, '25-08-2024 20:00:00', 8);
INSERT INTO Sezeni
VALUES (1, 2, '10-01-2023 15:30:00', 7);
INSERT INTO Sezeni
VALUES (1, 3, '20-07-2021 14:00:00', 1);
INSERT INTO Sezeni
VALUES (3, 1, '11-11-2021 11:00:00', 1); -- v lokaci 3 bylo jenom 1 sezeni

-- ucasti na sezeni: vklad vedoucich
INSERT INTO UcastNaSezeni
VALUES (4, 2, 1); -- vlozeni vedouciho (ucastnik 4) na sezeni 1 v lokalite 2
INSERT INTO UcastNaSezeni
VALUES (6, 2, 2); -- vlozeni vedouciho (ucastnik 6) na sezeni 2 v lokalite 2
INSERT INTO UcastNaSezeni
VALUES (8, 1, 1);
INSERT INTO UcastNaSezeni
VALUES (7, 1, 2); -- vlozeni vedouciho (ucastnik 7) na sezeni 2 v lokalite 1
INSERT INTO UcastNaSezeni
VALUES (1, 1, 3);
--
-- -- ucasti na sezeni: vklad beznych ucastnikov: id ucastnika, id miesta konania, id sezeni
INSERT INTO UcastNaSezeni
VALUES (1, 2, 1);
INSERT INTO UcastNaSezeni
VALUES (2, 2, 1);
INSERT INTO UcastNaSezeni
VALUES (8, 2, 1);
INSERT INTO UcastNaSezeni
VALUES (1, 1, 1);
INSERT INTO UcastNaSezeni
VALUES (1, 2, 2);
INSERT INTO UcastNaSezeni
VALUES (2, 2, 2);
INSERT INTO UcastNaSezeni
VALUES (3, 2, 1);
INSERT INTO UcastNaSezeni
VALUES (3, 2, 2);
INSERT INTO UcastNaSezeni
VALUES (8, 2, 2);
INSERT INTO UcastNaSezeni
VALUES (4, 2, 2);

-- upominky
INSERT INTO Upominka
VALUES (1, 1, 'nebyli jste na schůzce 3 mesice');
INSERT INTO Upominka
VALUES (1, 2, 'nebyli jste na schůzce 4 mesice');
INSERT INTO Upominka
VALUES (4, 1, 'nebyli jste na schůzce 3 mesice!!!!!');

-- kontroly alkoholika 1, kazdy mesic 15-teho se provadela
INSERT INTO Kontrola
VALUES (1, 1, '15-1-2024 10:00:00', 7);
INSERT INTO Kontrola
VALUES (1, 2, '15-2-2024 10:00:00', 7);
INSERT INTO Kontrola
VALUES (1, 3, '15-3-2024 10:00:00', 7);
INSERT INTO Kontrola
VALUES (1, 4, '15-4-2024 10:00:00', 8); -- tu ju provadel odbornik 8, odbornik 7 byl nemocny
INSERT INTO Kontrola
VALUES (1, 5, '15-5-2024 10:00:00', 7);

-- evidence alkoholu u alkoholika 1
INSERT INTO Evidence_Alkoholu
VALUES (1, 1, 1.274, 'pivo');
INSERT INTO Evidence_Alkoholu
VALUES (1, 2, 0.0, 'pivo');
INSERT INTO Evidence_Alkoholu
VALUES (1, 3, 2.5, 'vodka');
INSERT INTO Evidence_Alkoholu
VALUES (1, 4, 2.5, 'pivo');
INSERT INTO Evidence_Alkoholu
VALUES (1, 5, 0.3, 'vodka');

INSERT INTO Kontrola
VALUES (4, 1, '10-1-2020 08:00:00', 8);
INSERT INTO Kontrola
VALUES (4, 2, '15-4-2020 20:00:00', 7);
INSERT INTO Evidence_Alkoholu
VALUES (4, 1, 2.500, 'vodka');
INSERT INTO Evidence_Alkoholu
VALUES (4, 2, 0.500, 'mix ruzneho alkoholu');

INSERT INTO Kontrola
VALUES (3, 1, '10-1-2020 08:00:00', 9);
INSERT INTO Kontrola
VALUES (3, 2, '15-4-2020 20:00:00', 10);
INSERT INTO Evidence_Alkoholu
VALUES (3, 1, 1.500, 'vodka');
INSERT INTO Evidence_Alkoholu
VALUES (3, 2, 0.000, 'vino');

-- dotazy s JOIN
-- spojeni 2 tabulek: Alkoholici kteri dostali upominku a je im min nez 30 let
SELECT * FROM Alkoholik JOIN Upominka ON Alkoholik.id_alkoholika = Upominka.id_alkoholika WHERE vek <= 30;
-- spojeni 2 tabulek: Odbornici, ktery provadeli kontrolu a maji lekarskou praxi 5 let
SELECT * FROM Odbornik JOIN Kontrola K on Odbornik.id_odbornika = K.id_odbornika WHERE lekarska_prax =  5;
-- spojeni 3 tabulek: Zobrazi muzskych alkoholikov, kteri se zucastnili nejakeho sezeni a maji vic nez 30 let
SELECT jmeno FROM Ucastnik
    JOIN Alkoholik A2 ON Ucastnik.id_ucastnika = A2.id_alkoholika
    JOIN UcastNaSezeni UNS on Ucastnik.id_ucastnika = UNS.id_ucastnika
    WHERE vek > 30 AND pohlavi = 'm';

-- dotazy s GROUP BY a AGREGACNOU FUNKCIOU (COUNT a AVG)
-- kolko alkoholikov je muzov a kolko zien?
SELECT COUNT(pohlavi), pohlavi
FROM Alkoholik
GROUP BY pohlavi;
-- priemerne namerane hodnoty alkoholu pre jednotlivych alkoholikov
SELECT AVG(promile), id_alkoholika
FROM Evidence_Alkoholu
GROUP BY id_alkoholika;

--  dotaz s EXISTS
-- existuje odbornik, ktery provadel kontrolu ale neni z muni-med?
SELECT *
FROM Odbornik
WHERE EXISTS(SELECT *
             FROM Kontrola
             WHERE Odbornik.id_odbornika = Kontrola.id_odbornika
               AND Odbornik.expertiza != 'muni-med');

-- dotaz s IN
-- kolko je lokaci, na kterych bylo sezeni vice nez jednou
SELECT COUNT(lokace) AS lokace_s_vice
FROM MistoKonani
WHERE lokace IN (
    SELECT lokace
    FROM MistoKonani
    JOIN Sezeni ON MistoKonani.id_mistoKonani = Sezeni.id_mistoKonani
    WHERE id_sezeni > 1
);

-- NAVYSE SELECTY, PRO UKAZKU

-- informacie o sezenich na lokaci bozetechova 20
SELECT id_sezeni, datum_cas, id_vedouciho FROM Sezeni WHERE id_mistoKonani IN (
    SELECT id_mistoKonani
    FROM MistoKonani
    WHERE lokace = 'bozetechova 20'
 );
-- po vytvoreni noveho sezeni, automaticky se taky vytvori prislusni UcastNaSezeni, ve ktere je vedouci sezeni ucastnikem
CREATE OR REPLACE TRIGGER "automaticky_vklad_vedouciho_jako_ucastnika"
    AFTER INSERT ON Sezeni
    FOR EACH ROW
    BEGIN
        INSERT INTO UcastNaSezeni
        VALUES (:NEW.id_vedouciho, :NEW.id_mistoKonani , :NEW.id_sezeni);
    END;
-- v jake casti dne a kolik ucastniku bude(bylo) na sezeni
WITH ucastniciSezeni AS (
  SELECT
    s.id_mistoKonani,
    s.id_sezeni,
    COUNT(*) AS pocetucastniku
  FROM
    Sezeni s
    JOIN UcastNaSezeni uns ON s.id_sezeni = uns.id_sezeni AND s.id_mistoKonani = uns.id_misto_konani
  GROUP BY
    s.id_mistoKonani,
    s.id_sezeni
)
SELECT
  s.id_sezeni,
  s.datum_cas,
  COALESCE(sp.pocetucastniku, 0) AS ParticipantCount,
  CASE
    WHEN EXTRACT(HOUR FROM s.datum_cas) BETWEEN 6 AND 11 THEN 'Morning'
    WHEN EXTRACT(HOUR FROM s.datum_cas) BETWEEN 12 AND 17 THEN 'Afternoon'
    WHEN EXTRACT(HOUR FROM s.datum_cas) BETWEEN 18 AND 23 THEN 'Evening'
    ELSE 'Night'
  END AS TimeOfDayDescription
FROM
  Sezeni s
  LEFT JOIN ucastniciSezeni sp ON s.id_sezeni = sp.id_sezeni AND s.id_mistoKonani = sp.id_mistoKonani;


----------materialized view--------
CREATE MATERIALIZED VIEW pritomnostalkoholiku_pohled
AS
  SELECT
    a.id_alkoholika,
    u.jmeno AS alkoholik_jmeno,
    COUNT(uns.id_sezeni) AS pocet_sezeni
  FROM
    Alkoholik a
    JOIN Ucastnik u ON a.id_alkoholika = u.id_ucastnika
    LEFT JOIN UcastNaSezeni uns ON a.id_alkoholika = uns.id_ucastnika
  GROUP BY
    a.id_alkoholika,
    u.jmeno;


-- vypis pred zmenou
SELECT * FROM pritomnostalkoholiku_pohled;
-- vlozeni ucastnika na sezeni
INSERT INTO UcastNaSezeni
VALUES (3, 1, 1);
BEGIN
  DBMS_MVIEW.REFRESH('pritomnostalkoholiku_pohled');
END;
-- vypis po zmene
SELECT * FROM pritomnostalkoholiku_pohled;


--procedures
-- zaslani upominek
   CREATE OR REPLACE PROCEDURE Zaslani_Upominek  AS

    upominka_zprava_zacatek VARCHAR(30) := 'Nebyli ste na sezeni dele nez ';
    posledny_datum_sezeni Sezeni.datum_cas%TYPE;
    id_alk Alkoholik.id_alkoholika%TYPE;


    CURSOR c IS SELECT * FROM Alkoholik;
BEGIN

    FOR alk IN c LOOP
            SELECT alk.id_alkoholika, MAX(S.datum_cas)into id_alk, posledny_datum_sezeni
            from Sezeni S join UcastNaSezeni US on S.id_mistoKonani = US.id_misto_konani
        and S.id_sezeni = US.id_sezeni
        and US.id_ucastnika = alk.id_alkoholika;


    IF posledny_datum_sezeni is null then
        posledny_datum_sezeni := alk.datum_pridani;
    end if;

    DBMS_OUTPUT.PUT_LINE(TO_CHAR(id_alk) || ': ' || TO_CHAR(posledny_datum_sezeni));

    END LOOP;

END;

BEGIN Zaslani_Upominek; END;

-- informace o alkoholikovi : id : jmeno, pocet kontrol
CREATE OR REPLACE PROCEDURE AlkoholikInfo IS
  CURSOR AlcoholicsCursor IS
    SELECT a.id_alkoholika, u.jmeno, COUNT(k.id_kontrola) AS pocet_kontrol
    FROM Alkoholik a
    JOIN Ucastnik u ON a.id_alkoholika = u.id_ucastnika
    LEFT JOIN Kontrola k ON a.id_alkoholika = k.id_alkoholika
    GROUP BY a.id_alkoholika, u.jmeno;

  v_id Alkoholik.id_alkoholika%TYPE;
  v_jmeno Ucastnik.jmeno%TYPE;
  v_pocet_kontrol NUMBER;
BEGIN
  OPEN AlcoholicsCursor;
  LOOP
    FETCH AlcoholicsCursor INTO v_id, v_jmeno, v_pocet_kontrol;
    EXIT WHEN AlcoholicsCursor%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('Alcoholic ID: ' || v_id || ', Name: ' || v_jmeno || ', Kontrol Count: ' || v_pocet_kontrol);
  END LOOP;
  CLOSE AlcoholicsCursor;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data found.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END AlkoholikInfo;


    BEGIN AlkoholikInfo; END;

--create index index_jmen on Ucastnik(jmeno);
create index index_vedoucich on Sezeni(id_vedouciho);

-- vypis pro kazdeho ucastnika (ne id, ale jmeno), ze kolik sezeni vedl
explain plan for
select count(*) pocet_vedenych, U.jmeno
from
Ucastnik U join Sezeni S
on
U.id_ucastnika = S.id_vedouciho
group by
U.jmeno;

select * from table (DBMS_XPLAN.DISPLAY);



--------- Definice pristupovych prav ---------
GRANT ALL  ON Ucastnik TO XPANIS00;
GRANT ALL  ON Alkoholik TO XPANIS00;
GRANT ALL  ON Patron TO XPANIS00;
GRANT ALL  ON Odbornik TO XPANIS00;
GRANT ALL  ON Sezeni TO XPANIS00;
GRANT ALL  ON UcastNaSezeni TO XPANIS00;
GRANT ALL  ON MistoKonani TO XPANIS00;
GRANT ALL  ON Upominka TO XPANIS00;
GRANT ALL  ON Kontrola TO XPANIS00;
GRANT ALL  ON Evidence_Alkoholu TO XPANIS00;

GRANT EXECUTE ON Zaslani_Upominek to XPANIS00;
GRANT EXECUTE ON AlkoholikInfo to XPANIS00;

GRANT ALL  ON pritomnostalkoholiku_pohled TO XPANIS00;